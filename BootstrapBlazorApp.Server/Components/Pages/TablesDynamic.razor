@page "/Dynamic"
@using Microsoft.Extensions.Localization;
@using BootstrapBlazor.Components;
@using System.Data
@inject IStringLocalizer<Foo> Localizer
@inject IStringLocalizer<Foo> LocalizerFoo

<Table TItem="DynamicObject" DynamicContext="DataTableDynamicContext"
	   IsStriped="true" IsBordered="true" IsExcel="true" ShowRefresh="false"
	   ShowDefaultButtons="false" IsFixedHeader="true">
	<DetailRowTemplate>
		@{
			var detailContext = CreateDetailContext(context);
		}
		<div class="p-2 w-100">
			<Table TItem="DynamicObject" DynamicContext="detailContext" IsStriped="true" IsBordered="true" IsExcel="true">
			</Table>
		</div>
	</DetailRowTemplate>
</Table>

@code {

	private DataTableDynamicContext DataTableDynamicContext { get; set; }
	private DataTable userData { get; } = new();
	private List<DynamicObject> SelectedItems { get; set; } = [];

	private static bool ModelEqualityComparer(IDynamicObject x, IDynamicObject y) =>
		x.GetValue("Id")?.ToString() == y.GetValue("Id")?.ToString();

	protected override void OnInitialized()
	{
		base.OnInitialized();
		InitDataTable();
	}

	private void CreateContext()
	{
		// userdata uzerinden dynamiccontext olusturuluyor
		DataTableDynamicContext = new DataTableDynamicContext(userData, (context, col) =>
		{
			//her column icin yapılacak ayarlar burdan tanımlanır
			var propertyName = col.GetFieldName();

			if (propertyName == nameof(Foo.DateTime))
			{
				context.AddRequiredAttribute(nameof(Foo.DateTime));
				context.AddAutoGenerateColumnAttribute(nameof(Foo.DateTime),
					new KeyValuePair<string, object?>[] {
						new(nameof(AutoGenerateColumnAttribute.Text), Localizer[nameof(Foo.DateTime)].Value)
					});
			}
			else if (propertyName == nameof(Foo.Name))
			{
				context.AddRequiredAttribute(nameof(Foo.Name), Localizer["Name.Required"]);
				col.Text = Localizer[nameof(Foo.Name)];
			}
			else if (propertyName == nameof(Foo.Count))
			{
				context.AddRequiredAttribute(nameof(Foo.Count));
				context.AddDisplayNameAttribute(nameof(Foo.Count), Localizer[nameof(Foo.Count)].Value);
			}
			else if (propertyName == nameof(Foo.Complete))
			{
				col.Filterable = true;
				context.AddDisplayAttribute(nameof(Foo.Complete),
					new KeyValuePair<string, object?>[] {
						new(nameof(DisplayAttribute.Name), Localizer[nameof(Foo.Complete)].Value)
					});
			}
			else if (propertyName == nameof(Foo.Id))
			{
				col.Ignore = true;
			}
		});
	}

	private void InitDataTable()
	{
		userData.Columns.Add(nameof(Foo.Id), typeof(int));
		userData.Columns.Add(nameof(Foo.DateTime), typeof(DateTime));
		userData.Columns.Add(nameof(Foo.Name), typeof(string));
		userData.Columns.Add(nameof(Foo.Count), typeof(int));
		userData.PrimaryKey = [userData.Columns[0]];
		userData.Columns[0].AutoIncrement = true;

		Foo.GenerateFoo(LocalizerFoo, 10).ForEach(f =>
		{
			userData.Rows.Add(f.Id, f.DateTime, f.Name, f.Count);
		});

		CreateContext();
	}

	// Detail tablosu için ayrı DataTable oluşturma metodu
	private DataTable CreateDetailDataTable(object parentId)
	{
		var detailTable = new DataTable();
		detailTable.Columns.Add(nameof(Foo.Id), typeof(int));
		detailTable.Columns.Add(nameof(Foo.DateTime), typeof(DateTime));
		detailTable.Columns.Add(nameof(Foo.Name), typeof(string));
		detailTable.Columns.Add(nameof(Foo.Count), typeof(int));
		detailTable.PrimaryKey = [detailTable.Columns[0]];
		detailTable.Columns[0].AutoIncrement = true;

		// Detail data için örnek veriler (parentId'ye göre filtrelenebilir)
		Foo.GenerateFoo(LocalizerFoo, 3).ForEach(f =>
		{
			detailTable.Rows.Add(f.Id + 1000, f.DateTime, f.Name + " (Detail)", f.Count);
		});

		return detailTable;
	}

	public DataTableDynamicContext CreateDetailContext(DynamicObject context)
	{
		var id = context.GetValue(nameof(Foo.Id));
		var detailTable = CreateDetailDataTable(id);

		return new DataTableDynamicContext(detailTable, (context, col) =>
		{
			var propertyName = col.GetFieldName();
			if (propertyName == nameof(Foo.DateTime))
			{
				context.AddRequiredAttribute(nameof(Foo.DateTime));
				context.AddAutoGenerateColumnAttribute(nameof(Foo.DateTime),
					new KeyValuePair<string, object?>[] {
						new(nameof(AutoGenerateColumnAttribute.Text), Localizer[nameof(Foo.DateTime)].Value)
					});
			}
			else if (propertyName == nameof(Foo.Name))
			{
				context.AddRequiredAttribute(nameof(Foo.Name), Localizer["Name.Required"]);
				col.Text = Localizer[nameof(Foo.Name)];
			}
			else if (propertyName == nameof(Foo.Count))
			{
				context.AddRequiredAttribute(nameof(Foo.Count));
				context.AddDisplayNameAttribute(nameof(Foo.Count), Localizer[nameof(Foo.Count)].Value);
			}
			else if (propertyName == nameof(Foo.Complete))
			{
				col.Filterable = true;
				context.AddDisplayAttribute(nameof(Foo.Complete),
					new KeyValuePair<string, object?>[] {
						new(nameof(DisplayAttribute.Name), Localizer[nameof(Foo.Complete)].Value)
					});
			}
			else if (propertyName == nameof(Foo.Id))
			{
				col.Ignore = true;
			}
		})
		{
			OnDeleteAsync = items =>
			{
				foreach (var item in items)
				{
					var itemId = item.GetValue(nameof(Foo.Id));
					if (itemId != null)
					{
						var row = detailTable.Rows.Find(itemId);
						if (row != null)
						{
							detailTable.Rows.Remove(row);
						}
					}
				}
				detailTable.AcceptChanges();
				return Task.FromResult(true);
			},
			OnChanged = args =>
			{
				if (args.ChangedType == DynamicItemChangedType.Add)
				{
					var item = args.Items.First();
					item.SetValue(nameof(Foo.DateTime), DateTime.Today);
					item.SetValue(nameof(Foo.Name), "新建值 (Detail)");
				}
				return Task.CompletedTask;
			}
		};
	}
}
